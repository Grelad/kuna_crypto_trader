"""Main module."""
import hashlib
import hmac
import json
import time

import requests

try:
    from urllib.parse import urlencode
except ImportError:
    from urllib import urlencode

API_VERSION = '3'
KUNA_API_URL_PREFIX = 'v{}'.format(API_VERSION)
KUNA_API_BASEURL = 'https://api.kuna.io/{}/'.format(KUNA_API_URL_PREFIX)


class KunaAPI(object):
    def __init__(self, access_key=None, secret_key=None):
        self.access_key = access_key
        self.secret_key = secret_key

    def get_server_time(self):
        """
        Get the server time from server.
        :return: unix timestamp
        """
        return self.request('timestamp')

    def get_recent_market_data(self, symbols="ALL"):
        """
        Get recent market data from server.
        """
        return self.request(f'tickers?symbols={symbols}')

    def get_markets(self):
        """
        Get trades history data from server.
        """
        return self.request('markets')

    def get_user_account_info(self):
        """
        Information about the User and Assets.
        This is a User method.
        :return:
        """
        return self.request('auth/me', method='POST', is_user_method=True)

    def get_api_tokens_list(self):
        return self.request('auth/api_tokens', is_user_method=True)

    def request(self, path, args=None, method='GET', is_user_method=False):
        """
        Fetches the given path in the Kuna API.
        We translate args to a valid query string. If post_args is
        given, we send a POST request to the given path with the given
        arguments.
        :param path:
        :param args:
        :param method:
        :param is_user_method:
        :return:
        """
        if args is None:
            args = dict()

        if is_user_method:
            headers = {
                'accept': 'application/json',
                'content-type': 'application/json',
                'kun-nonce': str(int(time.time() * 1000)),
                'kun-apikey': self.access_key,
                'kun-signature': self._generate_signature(method, path, args)
            }
        else:
            headers = {
                'accept': 'application/json',
            }

        try:
            response = requests.request(
                method,
                KUNA_API_BASEURL + path,
                headers=headers)
        except requests.RequestException as e:
            response = json.loads(e.read())
            raise APIError(response)

        result = response.json()

        if result and isinstance(result, dict) and result.get('error'):
            raise APIError(result)
        elif response.status_code not in [200, 201, 202]:
            raise APIError(response.reason)
        return result

    def _generate_signature(self, method, path, args):
        """
        Signature is generated by an algorithm HEX(HMAC-SHA384("HTTP-verb|URI|params", secret_key))
        :param method:
        :param path:
        :param args:
        :return:
        """

        uri = '/' + KUNA_API_URL_PREFIX + '/' + path
        body = str('')
        nonce = int(time.time() * 1000)
        val = f"{uri}{nonce}{body}"

        # HMAC can only handle ascii (byte) strings
        # https://bugs.python.org/issue5285
        key = self.secret_key.encode('ascii')
        msg = val.encode('ascii')
        return hmac.new(key, msg, hashlib.sha384).hexdigest()


class APIError(Exception):
    def __init__(self, result):

        try:
            self.message = result["error"]["message"]
            self.code = result["error"].get("code")
        except:
            self.message = result

        Exception.__init__(self, self.message)
